import pygame
import random
import sys

# Game constants
SCREEN_WIDTH = 400
SCREEN_HEIGHT = 600
PIPE_WIDTH = 70
PIPE_GAP = 150
BIRD_SIZE = 30
GRAVITY = 0.5
FLAP_POWER = -8
FPS = 60

# Initialize pygame
pygame.init()
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Flappy Bird")
clock = pygame.time.Clock()
font = pygame.font.SysFont("Arial", 32)

def draw_text(text, x, y):
    label = font.render(text, True, (255,255,255))
    screen.blit(label, (x, y))

class Bird:
    def __init__(self):
        self.x = 50
        self.y = SCREEN_HEIGHT // 2
        self.vel = 0

    def flap(self):
        self.vel = FLAP_POWER

    def update(self):
        self.vel += GRAVITY
        self.y += self.vel
        if self.y < 0:
            self.y = 0
            self.vel = 0

    def draw(self):
        pygame.draw.rect(screen, (255,255,0), (self.x, int(self.y), BIRD_SIZE, BIRD_SIZE))

    def get_rect(self):
        return pygame.Rect(self.x, int(self.y), BIRD_SIZE, BIRD_SIZE)

class Pipe:
    def __init__(self, x):
        self.x = x
        self.height = random.randint(50, SCREEN_HEIGHT - PIPE_GAP - 50)

    def update(self):
        self.x -= 3

    def draw(self):
        pygame.draw.rect(screen, (0,255,0), (self.x, 0, PIPE_WIDTH, self.height))
        bottom_y = self.height + PIPE_GAP
        pygame.draw.rect(screen, (0,255,0), (self.x, bottom_y, PIPE_WIDTH, SCREEN_HEIGHT-bottom_y))

    def get_upper_rect(self):
        return pygame.Rect(self.x, 0, PIPE_WIDTH, self.height)

    def get_lower_rect(self):
        bottom_y = self.height + PIPE_GAP
        return pygame.Rect(self.x, bottom_y, PIPE_WIDTH, SCREEN_HEIGHT-bottom_y)

def main():
    bird = Bird()
    pipes = [Pipe(SCREEN_WIDTH + 100)]
    score = 0
    running = True
    game_over = False

    while running:
        clock.tick(FPS)
        screen.fill((0,0,128))

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN and not game_over:
                if event.key == pygame.K_SPACE:
                    bird.flap()
            if event.type == pygame.KEYDOWN and game_over:
                if event.key == pygame.K_r:
                    main()
                    return

        if not game_over:
            bird.update()
            # Move pipes, add new pipes, remove old pipes
            for pipe in pipes:
                pipe.update()
            if pipes[-1].x < SCREEN_WIDTH - 250:
                pipes.append(Pipe(SCREEN_WIDTH))
            if pipes[0].x < -PIPE_WIDTH:
                pipes.pop(0)
                score += 1

            # Collision detection
            bird_rect = bird.get_rect()
            for pipe in pipes:
                if bird_rect.colliderect(pipe.get_upper_rect()) or bird_rect.colliderect(pipe.get_lower_rect()):
                    game_over = True
            if bird.y + BIRD_SIZE > SCREEN_HEIGHT:
                game_over = True

        bird.draw()
        for pipe in pipes:
            pipe.draw()

        draw_text(f"Score: {score}", 10, 10)
        if game_over:
            draw_text("GAME OVER! Press R to restart", 30, SCREEN_HEIGHT//2)

        pygame.display.flip()

    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
